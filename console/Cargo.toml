[package]
name = "onpurpose"
version = "0.1.118"
edition = "2021"

[dependencies]
inquire = { git = "https://github.com/rchriste/inquire", branch = "main", features = ["editor"] } #inquire is for building interactive prompts in terminals
tokio = { version = "1.39.3", features = ["full"] } #Added so I can use Surreal DB
futures = "0.3" #Recommended by the official Rust Async book for async programming
#Added so I can store and persist data, kv-mem is an in memory database that is maybe not required in a not test build
surrealdb-alpha = { version = "2.0.9", features = ["kv-mem", "kv-rocksdb"] }
serde = "1.0.208" #Implied to be required by surrealdb_extra's getting started documentation
chrono = "0.4.38"
parse_datetime = "0.6.0" #So I can parse when to expect something to be available, fundu should replace this
fundu = { version = "2.0.1", features = ["standard", "custom"] } #So I can parse when to expect something to be available
dateparser = { git = "https://github.com/rchriste/dateparser", branch = "main" }
lazy_static = "1.4.0" #So I can efficiently parse regular expressions
regex = "1.10.2" #So I can parse more date formats
itertools = "0.14.0"
#So I can create a self referencing struct, another option that I found or an alternative library could be https://lib.rs/crates/escher
# ouroboros = "0.18.0"
# Use my own version so I can try to disable a clippy warning. After this is upstreamed I can switch back to the official version.
ouroboros = { git = "https://github.com/rchriste/ouroboros", branch = "main" }
derive_builder = "0.20.0"
better_term = "1.4.61" #Added so I can use bold and other styles, initially just in the help text but with goals to expand
crossterm = "0.28.1" #Added so I can use RATATUI
rand = "0.8.5" #So I can pick a random priority
ahash = "0.8.11" #Because it is 10x faster than Rust's built in hasher
mimalloc = "0.1.43" #Because allocation performance shows up in performance measurements, this seems to give about a %15 perf improvement when running calculated data

# Possible libraries intended to use to make querying SurrealDB easier, but I also looked at these some and I am not
# sure as it seems to require that you come up with your own RecordId without the ability to specify NONE to get 
# surreal DB to pick it so I have decided to just try direct query to get familiar with that.
# surreal_devl = "1.0.2"
# surreal_derive_plus = "1.0.7"

#Note that I tried adding the below package so I can see a call stack on stack overflow without needing to run inside a debugger.
#However when I tried it on 10/25/2023 I had compile errors that seemed to imply that only Linux was supported at the time (version 0.3)
#Also note that this package is only recommended for non-production scenarios. When I looked into this it seemed that there are 
#security reasons related to code that is meant to never panic can actually still panic if there is a stack overflow and so there
#is somehow a possible security risk to running a panic handler and printing out a call stack on no panic code. Currently Rust
#when a stack overflow happens just hard aborts without running a panic handler. So for now if there is a stack overflow you just
#need to get it into a debugger to get a call stack.
#backtrace-on-stack-overflow = "0.3.0" 

#I should look into the anyhow crate (suggested for application code like the console app) or thiserror crate (suggested for library code) for errors

# Maybe use this to make things bold and different colors - https://crates.io/crates/nu-ansi-term
