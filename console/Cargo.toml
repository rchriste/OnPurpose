[package]
name = "on_purpose"
version = "0.0.85"
edition = "2021"

[dependencies]
inquire = { version = "0.6.2", features = ["editor"] } #inquire is for building interactive prompts in terminals
tokio = { version = "1.32.0", features = ["full"] } #Added so I can use Surreal DB
futures = "0.3" #Recommended by the official Rust Async book for async programming
surrealdb = { version = "1.0.0", features = ["kv-mem", "kv-rocksdb"] } #Added so I can store and persist data, kv-mem is an in memory database that is maybe not required in a not test build
surrealdb_extra = "0.5.1" #Added because I think using this for table definitions might save me time
serde = "1.0.188" #Implied to be required by surrealdb_extra's getting started documentation
chrono = "0.4.31"
async-recursion = "1.0.5"
duration-str = "0.7.0" #So I can parse the amount of time to wait
parse_datetime = "0.5.0" #So I can parse when to expect something to be available
dateparser = "0.2.0"
itertools = "0.11.0"
ouroboros = "0.18.0" #So I can create a self referencing struct, another option that I found or an alternative library could be https://lib.rs/crates/escher
derive_builder = "0.12.0"

#Note that I tried adding the below package so I can see a call stack on stack overflow without needing to run inside a debugger.
#However when I tried it on 10/25/2023 I had compile errors that seemed to imply that only Linux was supported at the time (version 0.3)
#Also note that this package is only recommended for non-production scenarios. When I looked into this it seemed that there are 
#security reasons related to code that is meant to never panic can actually still panic if there is a stack overflow and so there
#is somehow a possible security risk to running a panic handler and printing out a call stack on no panic code. Currently Rust
#when a stack overflow happens just hard aborts without running a panic handler. So for now if there is a stack overflow you just
#need to get it into a debugger to get a call stack.
#backtrace-on-stack-overflow = "0.3.0" 

#I should look into the anyhow crate (suggested for application code like the console app) or thiserror crate (suggested for library code) for errors

# Maybe use this to make things bold and different colors - https://crates.io/crates/nu-ansi-term